{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "c5f2e111-3b33-4331-b1b4-83814a4fd6d5",
      "name": "When clicking â€˜Execute workflowâ€™"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1qbzPRjs6rA0Veo5iNw9zg0AyyFCJbFo23FtmcBH6TaE",
          "mode": "list",
          "cachedResultName": "Mock Campaign Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1qbzPRjs6rA0Veo5iNw9zg0AyyFCJbFo23FtmcBH6TaE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1qbzPRjs6rA0Veo5iNw9zg0AyyFCJbFo23FtmcBH6TaE/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        208,
        0
      ],
      "id": "54ab1709-cfdb-4442-bbf0-f4dd1e9e78ce",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qwJiO2nLGU5nQzhQ",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Group by campaign name\nconst grouped = {};\n\nfor (const item of items) {\n  const row = item.json;\n  const name = row[\"Campaign Name\"];\n  const date = new Date(row[\"Date\"]);\n\n  if (!grouped[name]) grouped[name] = [];\n  grouped[name].push({ ...row, date });\n}\n\n// Sort each group by date descending, pick last 2\nconst results = [];\n\nfor (const [campaign, rows] of Object.entries(grouped)) {\n  const sorted = rows.sort((a, b) => b.date - a.date);\n  if (sorted.length < 2) continue;\n\n  const [today, yesterday] = sorted;\n  \n  const todayROAS = parseFloat(today[\"Revenue\"]) / parseFloat(today[\"Spend\"]);\n  const yesterdayROAS = parseFloat(yesterday[\"Revenue\"]) / parseFloat(yesterday[\"Spend\"]);\n  \n  const todayCPA = parseFloat(today[\"Spend\"]) / parseFloat(today[\"Conversions\"]);\n  const yesterdayCPA = parseFloat(yesterday[\"Spend\"]) / parseFloat(yesterday[\"Conversions\"]);\n\n  const deltaROAS = (todayROAS - yesterdayROAS) / yesterdayROAS;\n  const deltaCPA = (todayCPA - yesterdayCPA) / yesterdayCPA;\n\n  if (deltaROAS < -0.3 || deltaCPA > 0.3) {\n    results.push({\n      json: {\n        campaign,\n        date: today[\"Date\"],\n        ROAS: todayROAS.toFixed(2),\n        CPA: todayCPA.toFixed(2),\n        deltaROAS: deltaROAS.toFixed(2),\n        deltaCPA: deltaCPA.toFixed(2),\n      }\n    });\n  }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "478963cd-7760-46a0-876e-e3fd83945487",
      "name": "Code"
    },
    {
      "parameters": {
        "sendTo": "mtorres.sandbox@gmail.com",
        "subject": "=ðŸš¨ Alert for {{$node[\"Code\"].json.campaign}}\n",
        "message": "=You've got a new report, generated by ChatGPT:\n\n{{$json.message.content}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        976,
        0
      ],
      "id": "91bce2c5-eca9-4d94-9d4a-203d40e00045",
      "name": "Send a message",
      "webhookId": "1d372bc5-264b-490a-9de6-b3034f40c9bd",
      "credentials": {
        "gmailOAuth2": {
          "id": "bYJtwxTkXXOpfPgn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=Campaign: {{$json.campaign}}\nDate: {{$json.date}}\nROAS: {{$json.ROAS}} (change: {{$json.deltaROAS}})\nCPA: {{$json.CPA}} (change: {{$json.deltaCPA}})\n\nWrite a short alert for the marketing team describing this performance change, and suggest what they should review.\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        624,
        0
      ],
      "id": "228ffea7-2ce1-4cfb-a65f-c5f466314547",
      "name": "OpenAI",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "credentials": {
        "openAiApi": {
          "id": "pOSHkmSxzFFYZloh",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ee81212c-bade-4e17-954b-9fcba3e39419",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2354fcc2d1bf7facd86611c34cd776c549289cf40367e51d2a1417f9089e6ecb"
  },
  "id": "x9X2Up7oTaxnNikH",
  "tags": []
}
